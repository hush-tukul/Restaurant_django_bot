version: '3.7'

services:

  db:
    image: postgres:13
    container_name: restaurant_django_db
    restart: always
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - restaurant_network
    ports:
      - "5432:5432"

  bot:
    image: "${BOT_IMAGE_NAME:-tg_bot-image}"
    container_name: "${BOT_CONTAINER_NAME:-tg_bot-container}"
    build:
      context: .
    working_dir: "/usr/src/app/${BOT_NAME:-tg_bot}"
    stop_signal: SIGINT
    volumes:
      - .:/usr/src/app/${BOT_NAME:-tg_bot}
      - /var/lib/telegram-bot-api:/var/lib/telegram-bot-api
    command: python3 -m bot
    restart: unless-stopped
    env_file:
      - "../Restaurant_django_bot/.env"
    networks:
      - restaurant_network
    depends_on:
      - db

  web:
    build:
      context: ./web
    container_name: restaurant_django_app
    command: python /usr/src/app/web/manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/usr/src/app/web
    ports:
      - "8000:8000"
    networks:
      - restaurant_network
    depends_on:
      - db
    environment:
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      DJANGO_DEBUG: "${DJANGO_DEBUG}"








networks:
  restaurant_network:

volumes:
  postgres_data:


#  api:
#    image: aiogram/telegram-bot-api:latest
#    restart: always
#    env_file:
#      - "../Payment_bot/.env"
#    ports:
#      - "8080:8080"
#    volumes:
#      - /var/lib/telegram-bot-api:/var/lib/telegram-bot-api
#
#    networks:
#      - bot













#
#version: '3.7'
#
#services:
#  bot:
#    image: "${BOT_IMAGE_NAME:-tg_bot-image}"
#    container_name: "${BOT_CONTAINER_NAME:-tg_bot-container}"
#    build:
#      context: .
#    working_dir: "/usr/src/app/${BOT_NAME:-tg_bot}"
#    stop_signal: SIGINT
#    volumes:
#      - .:/usr/src/app/${BOT_NAME:-tg_bot}
#      - /var/lib/telegram-bot-api:/var/lib/telegram-bot-api
#    command: python3 -m bot
#    restart: unless-stopped
#    env_file:
#      - "../Payment_bot/.env"
#    networks:
#      - bot
#    depends_on:
#      - db
#      - quart
#
#  quart:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: hypercorn --bind 0.0.0.0:5000 app.py:app
#    restart: unless-stopped
#    ports:
#      - "5000:5000"
#    depends_on:
#      - db
#    networks:
#      - bot
#
#
#  db:
#    image: postgres
#    restart: always
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: 7aB8xYp3
#      POSTGRES_DB: bot_db
#    ports:
#      - "5432:5432"
#    volumes:
#      - ./pgdata:/var/lib/postgresql/data
#    networks:
#      - bot
#
#  adminer:
#    image: adminer
#    restart: always
#    ports:
#      - 80:8080
#    networks:
#      - bot
#
#  api:
#    image: aiogram/telegram-bot-api:latest
#    restart: always
#    env_file:
#      - "../Payment_bot/.env"
#    ports:
#      - "8080:8080"
#    volumes:
#      - /var/lib/telegram-bot-api:/var/lib/telegram-bot-api
#
#    networks:
#      - bot
#
#
#networks:
#  bot:
#    driver: bridge